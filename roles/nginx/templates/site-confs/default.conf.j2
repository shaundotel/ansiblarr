server {
    listen {{ nginx_http_port }} default_server;
    listen [::]:{{ nginx_http_port }} default_server;

    server_name _;

    if ($request_method !~ ^(GET|HEAD)$ ) {
        return 500 'Cannot redirect request that is not GET or HEAD';
    }

    if ($request_method ~ ^(GET|HEAD)$ ) {
        return 308 https://$host$request_uri;
    }

}

server {
    listen {{ nginx_https_port }} ssl http2;
    listen [::]:{{ nginx_https_port }} ssl http2;

    server_name _;

    ssl_certificate           certs/certificate.pem;
    ssl_certificate_key       certs/private.key;

{% for item in overseerr_instances %}
    location ^~ /{{ item.overseerr_docker_name }} {
        set $app 'overseerr';

        # Remove /{{ item.overseerr_docker_name }} path to pass to the app
        rewrite ^/{{ item.overseerr_docker_name }}/?(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:{{ item.overseerr_port }}; # NO TRAILING SLASH

        # Redirect location headers
        proxy_redirect ^ /$app;
        proxy_redirect /setup /$app/setup;
        proxy_redirect /login /$app/login;

        # Sub filters to replace hardcoded paths
        proxy_set_header Accept-Encoding "";
        sub_filter_once off;
        sub_filter_types *;
        sub_filter 'href="/"' 'href="/$app"';
        sub_filter 'href="/login"' 'href="/$app/login"';
        sub_filter 'href:"/"' 'href:"/$app"';
        sub_filter '\/_next' '\/$app\/_next';
        sub_filter '/_next' '/$app/_next';
        sub_filter '/api/v1' '/$app/api/v1';
        sub_filter '/login/plex/loading' '/$app/login/plex/loading';
        sub_filter '/images/' '/$app/images/';
        sub_filter '/android-' '/$app/android-';
        sub_filter '/apple-' '/$app/apple-';
        sub_filter '/favicon' '/$app/favicon';
        sub_filter '/logo_' '/$app/logo_';
        sub_filter '/site.webmanifest' '/$app/site.webmanifest';
    }
{% endfor %}

{% for item in prowlarr_instances %}
    location ~ /{{ item.prowlarr_docker_name }} {
        proxy_pass http://127.0.0.1:{{ item.prowlarr_port }};
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
    # Allow the API/Indexer External Access via NGINX
    location ^~ /{{ item.prowlarr_docker_name }}(/[0-9]+)?/api {
        auth_basic off;
        proxy_pass http://127.0.0.1:{{ item.prowlarr_port }};
    }
{% endfor %}

{% for item in qbittorrent_instances %}
    location /{{ item.qbittorrent_nginx_location }}/ {
        proxy_pass         http://127.0.0.1:{{ item.qbittorrent_webui_port }}/;
        proxy_http_version 1.1;

        proxy_set_header   Host               127.0.0.1:{{ item.qbittorrent_webui_port }};
        proxy_set_header   X-Forwarded-Host   $http_host;
        proxy_set_header   X-Forwarded-For    $remote_addr;

        # not used by qBittorrent
        #proxy_set_header   X-Forwarded-Proto  $scheme;
        #proxy_set_header   X-Real-IP          $remote_addr;

        # optionally, you can adjust the POST request size limit, to allow adding a lot of torrents at once
        #client_max_body_size 100M;

        # Since v4.2.2, is possible to configure qBittorrent
        # to set the "Secure" flag for the session cookie automatically.
        # However, that option does nothing unless using qBittorrent's built-in HTTPS functionality.
        # For this use case, where qBittorrent itself is using plain HTTP
        # (and regardless of whether or not the external website uses HTTPS),
        # the flag must be set here, in the proxy configuration itself.
        # Note: If this flag is set while the external website uses only HTTP, this will cause
        # the login mechanism to not work without any apparent errors in console/network resulting in "auth loops".
        proxy_cookie_path  /                  "/; Secure";
    }
{% endfor %}

{% for item in radarr_instances %}
    location ^~ /{{ item.radarr_docker_name }} {
        proxy_pass          http://127.0.0.1:{{ item.radarr_port }};
        proxy_set_header    Host                $host:$server_port;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host    $host;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_redirect      off;
        proxy_http_version  1.1;
        proxy_set_header    Upgrade             $http_upgrade;
        proxy_set_header    Connection          $http_connection;
    }

    # Allow the API External Access via NGINX
    location ^~ /{{ item.radarr_docker_name }}/api {
        auth_basic off;
        proxy_pass http://127.0.0.1:{{ item.radarr_port }};
    }
{% endfor %}

{% for item in sonarr_instances %}
    location ^~ /{{ item.sonarr_docker_name }} {
        proxy_pass          http://127.0.0.1:{{ item.sonarr_port }};
        proxy_set_header    Host                127.0.0.1:$server_port;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host    $host;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_redirect      off;
        proxy_http_version  1.1;
        proxy_set_header    Upgrade             $http_upgrade;
        proxy_set_header    Connection          $http_connection;
    }

    # Allow the API External Access via NGINX
    location ^~ /{{ item.sonarr_docker_name }}/api {
        auth_basic off;
        proxy_pass http://127.0.0.1:{{ item.sonarr_port }};
    }
{% endfor %}

    location /bling_status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }

    location = /error.html {
        ssi on;
        internal;
        auth_basic off;
        root /var/www/;
    }
}